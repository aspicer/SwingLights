#include <stdint.h>

uint8_t TRIG_LOOKUP[181] = {0, 2, 4, 7, 9, 11, 13, 16, 18, 20, 22, 24, 27, 29, 31, 33, 35, 38, 40, 42, 44, 46, 49, 51, 53, 55, 57, 60, 62, 64, 66, 68, 70, 72, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 127, 129, 131, 133, 135, 137, 139, 141, 143, 144, 146, 148, 150, 152, 153, 155, 157, 159, 160, 162, 164, 166, 167, 169, 171, 172, 174, 176, 177, 179, 180, 182, 183, 185, 186, 188, 190, 191, 192, 194, 195, 197, 198, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 236, 237, 238, 239, 240, 240, 241, 242, 243, 243, 244, 244, 245, 246, 246, 247, 247, 248, 248, 249, 249, 250, 250, 251, 251, 252, 252, 252, 253, 253, 253, 253, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255}

uint8_t SIN(int ANGLE){ // ANGLE is a special chopped up angle
	if (ANGLE < 180 && ANGLE >= 0) {
		return TRIG_LOOKUP[ANGLE];
	} else if (ANGLE > -180 && ANGLE <= 0){
		return 255-TRIG_LOOKUP[-ANGLE];
	} else if (ANGLE >= 180 && ANGLE <= 360){
		return TRIG_LOOKUP[360-ANGLE];
	} else if (ANGLE <= -180 && ANGLE >= -360){
		return 255-TRIG_LOOKUP[ANGLE+360];
	} else {
		if (ANGLE > 360) {
			return SIN(((ANGLE + 360) % 720) - 360);
		} else if (ANGLE < -360) {
			return 255- SIN(((-(ANGLE - 360)) % 720) - 360);
		} else {
			return 0;
		}
	}
}

uint8_t COS(int ANGLE) {
	return SIN(ANGLE + 180);
}